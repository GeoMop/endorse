#!/bin/bash

# set -x

# Development: root of the sources
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
ENDORSE_SRC_ROOT="$SCRIPTPATH/.."
ENDORSE_SRC_BAYES="${ENDORSE_SRC_ROOT}/src/endorse/bayes_orig"
ENDORSE_VENV_BAYES="${ENDORSE_SRC_ROOT}/venv_bayes"

debug=false
clean=""

obligatory_param=0
while getopts ":hdn:o:c" opt; do
  case $opt in
    h)
      # help
      echo "Usage: ./run_all_metacentrum.sh -n <N_CHAINS> -o <OUTPUT_DIR> -c -d"
      echo "-c ... cleans the <OUTPUT_DIR> at first"
      echo "-d ... only print the container command"
      exit 0
      ;;
    d)
      # debug
      debug=true
      ;;
    n)
      # number of Markov chains
      n_chains=$OPTARG
      ((obligatory_param=obligatory_param+1))
      ;;
    o)
      # output directory
      output_dir=$OPTARG
      ((obligatory_param=obligatory_param+1))
      ;;
    c)
      # output directory
      clean="clean"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [ "$debug" == true ]; then
  echo "n_chains = $n_chains"
  echo "output_dir = $output_dir"
  echo "clean = $clean"
fi

if [[ $obligatory_param -lt 2 ]]; then
  echo "Not all obligatory parameters set!"
  exit 1
fi


sif_image="${ENDORSE_SRC_ROOT}/endorse.sif"

# singulairity part
sing_command="singularity exec -B ${ENDORSE_SRC_ROOT}:${ENDORSE_SRC_ROOT} ${sif_image}"

# command that should be run inside singularity
command="source ${ENDORSE_VENV_BAYES}/bin/activate && python3 -m mpi4py ${ENDORSE_SRC_BAYES}/run_all.py ${output_dir} $n_chains $clean"

final_command="${sing_command} bash -c \"${command}\""
echo "${final_command}"

if [ "$debug" == false ]; then
  eval "${final_command}"
  qsub "${output_dir}/pbs_job.sh"
fi
